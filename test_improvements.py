#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π Max Drawdown –∏ Sharpe Ratio
"""
import subprocess
import json
import os

def run_backtest(search_type="dynamic"):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ç–∫—Ç–µ—Å—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–∏–ø–æ–º –ø–æ–∏—Å–∫–∞"""
    cmd = [
        "python", "aibot2.py",
        "--symbol", "SOL/USDT",
        "--timeframe", "15m", 
        "--max-bars", "50000",
        "--search", search_type,
        "--use-dynamic-sizing",
        "--max-position-size", "0.8",
        "--dd-protection", "-0.15",
        "--turnover-cap", "0.05",
        "--max-dd-cap", "0.30"
    ]
    
    print(f"\nüîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –±—ç–∫—Ç–µ—Å—Ç —Å –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º: {search_type}")
    print("–ö–æ–º–∞–Ω–¥–∞:", " ".join(cmd))
    
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=600)
        print("‚úÖ –ë—ç–∫—Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
        if result.stderr:
            print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:", result.stderr[:500])
        return result.returncode == 0
    except subprocess.TimeoutExpired:
        print("‚è∞ –¢–∞–π–º-–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def compare_results():
    """–°—Ä–∞–≤–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞"""
    files = [
        ("best_thresholds.json", "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π"),
        ("best_thresholds_improved.json", "–£–ª—É—á—à–µ–Ω–Ω—ã–π (–ø—Ä–∏–º–µ—Ä)")
    ]
    
    print("\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
    print("=" * 60)
    
    for filename, name in files:
        if os.path.exists(filename):
            with open(filename, 'r') as f:
                config = json.load(f)
            
            perf = config.get('performance', {})
            print(f"\n{name}:")
            print(f"  Sharpe Ratio: {perf.get('sharpe', 'N/A'):.3f}")
            print(f"  CAGR:         {perf.get('cagr', 0)*100:.1f}%")
            print(f"  Max Drawdown: {perf.get('max_dd', 0)*100:.1f}%")
            
            dynamic = config.get('dynamic_features', {})
            if dynamic:
                print(f"  –î–∏–Ω. —Ä–∞–∑–º–µ—Ä:  {dynamic.get('use_dynamic_sizing', False)}")
                print(f"  –ó–∞—â–∏—Ç–∞ DD:    {dynamic.get('dd_protection_threshold', 'N/A')}")
        else:
            print(f"\n{name}: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

def main():
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ò–ô –¢–û–†–ì–û–í–û–ì–û –ë–û–¢–ê")
    print("=" * 50)
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∂–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n1. –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    if os.path.exists("best_thresholds.json"):
        with open("best_thresholds.json", 'r') as f:
            current = json.load(f)
        perf = current.get('performance', {})
        print(f"   Sharpe: {perf.get('sharpe', 0):.3f}")
        print(f"   CAGR: {perf.get('cagr', 0)*100:.1f}%") 
        print(f"   Max DD: {perf.get('max_dd', 0)*100:.1f}%")
    
    # –ó–∞–ø—É—Å—Ç–∏–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
    print("\n2. –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞...")
    success = run_backtest("dynamic")
    
    if success:
        print("\n3. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
        compare_results()
        
        print("\n‚ú® –û–ñ–ò–î–ê–ï–ú–´–ï –£–õ–£–ß–®–ï–ù–ò–Ø:")
        print("  ‚Ä¢ Max Drawdown: -50% ‚Üí -25-30%")
        print("  ‚Ä¢ Sharpe Ratio: 0.84 ‚Üí 1.0-1.2")
        print("  ‚Ä¢ –ë–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å")
        print("  ‚Ä¢ –õ—É—á—à–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –∫ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏")
        print("  ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –ø—Ä–æ—Å–∞–¥–æ–∫")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —É–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º")
        print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Ä—É—á–Ω—É—é:")
        print("python aibot2.py --search dynamic --use-dynamic-sizing")

if __name__ == "__main__":
    main()



